##############
##   KROW   ##
##############
test -f ${HOME}/.krow.rc && source ${HOME}/.krow.rc

##############
##  Common  ##
##############
#export GOPATH=$HOME/golang

# curl -O https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash
source ~/.git-completion.bash

# swift
## swift package completion-tool generate-bash-script > ~/.swift-package-complete.bash
source ~/.swift-package-complete.bash

# shell completion
eval "$(pipenv --completion)"

# disable the bash session mumbo jumbo and use one history file, also
##               touch ~/.bash_sessions_disable
SHELL_SESSION_HISTORY=0
# BASH History
HISTSIZE=10000000
HISTFILESIZE=20000000
HISTCONTROL=ignoredups:ignorespace
shopt -s histappend
# history on all terminals everywhere (http://briancarper.net/blog/248/)
export PROMPT_COMMAND="history -a"
alias his="history -n; history -a"

shopt -s checkwinsize

export PYTHONSTARTUP=~/.pythonrc

#export LANG=fi_FI.utf8
# for fixing the stupid konsole ctrl-q/s thingy:
stty -ixon
export CONFIG_SCHED_AUTOGROUP=y

export JAVA_HOME=$(/usr/libexec/java_home)
export PYSPARK_PYTHON=python3

# pipenv
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export PIPENV_VENV_IN_PROJECT=1

## ssh options:
##-o TCPKeepAlive=yes -o ServerAliveInterval=4

############
##  Path  ##
############

export ANDROID_HOME=$HOME/Library/Android/sdk
export ANDROID_NDK_HOME=$HOME/Library/Android/sdk/ndk-bundle

export DOTNET_PATH=/usr/local/share/dotnet
export PATH=$HOME/.bin:/usr/local/bin:/usr/bin:/usr/local/git/bin:/usr/local/sbin/:/usr/local/mysql/bin:$PATH:$ANDROID_HOME/build-tools/23.0.1/:$ANDROID_HOME/platform-tools:$ANDROID_HOME/tools:$ANDROID_NDK_HOME:$HOME/.rvm/bin:$GOPATH/bin:$SCALA_HOME/bin:$SPARK_HOME/bin:$DOTNET_PATH

alias unset_py="unset PYTHONPATH"
alias python_3="unset PYTHONPATH && export PYTHONPATH='/usr/local/lib/python3.7/site-packages/'"
alias python_2="unset PYTHONPATH && export PYTHONPATH='/usr/local/lib/python2.7/site-packages/'"


#############
##  Alias  ##
#############

## setup prompt
export PS1='\[$(tput setaf 11)\][\[$(tput setaf 137)\]\W\[$(tput setaf 11)\]] >\[$(tput sgr0)\] '
alias hPS="PS1='\[\033[01;30m\]\h\[\033[00m\]:[\[\033[01;37m\]\W\[\033[00m\]] > '"
alias sPS="PS1='[\[\033[01;33m\]\u@\h\[\033[00m\]]:\[\033[01;31m\]\W\[\033[00m\]\$ '"
alias lPS="PS1='[\[\033[01;31m\]\w\[\033[00m\]]> '"

alias reload="source ~/.bashrc"

alias tsaver='j=0;a=1;x=1;y=1;xd=1;yd=1;while true;do for i in {1..2000} ; do if [[ $x == $LINES || $x == 0 ]]; then xd=$(( $xd *-1 )) ; fi ; if [[ $y == $COLUMNS || $y == 0 ]]; then yd=$(( $yd * -1 )) ; fi ; x=$(( $x + $xd )); y=$(( $y + $yd )); printf "\33[%s;%sH\33[48;5;%sm . \33[0m" $x $y $(( $a % 8 + 16 + $j % 223 )) ;a=$(( $a + 1 )) ; done ; x=$(( x%$COLUMNS + 1 )) ; j=$(( $j + 8 )) ;done'

alias t="tmux"

alias d="deactivate"

export EDITOR='emacs'
alias e='emacs'
alias ec='emacsclient'
alias editrc='e ~/.bashrc'
alias editssh='e ~/.ssh/known_hosts'
alias editreadme='e ~/README'
alias editgit='e ~/.gitconfig'
alias editemacs='e ~/.emacs'
alias journal='e ~/GoogleDrive/work_log'

alias view-rc='less ~/.bashrc'
alias view-emacscheat='less ~/.emacs.d/cheatsheet.el'
alias view-emacs='less ~/.emacs.d/init.el'

alias vg="vagrant global-status"

alias c='cd ~/code/'
alias gd="cd ~/GoogleDrive/"
alias icloud="cd ~/icloud/"
alias testing='cd ~/testing'
alias scratchpad='cd ~/scratchpad'
alias org='cd ~/org'

alias ssh='ssh -o TCPKeepAlive=yes -o ServerAliveInterval=4'

alias p='cd -'
alias b='cd ..'
alias bb='cd ../..'
alias bbb='cd ../../..'
alias bbbb='cd ../../../..'

# SVN
alias svndiff='svn diff | less'
#svnmod:
alias svnmod="svn status | /usr/bin/grep --color=auto -E '^M|^C|^A|^D|^R|^!'"
alias svnlog='svn log |less'
#svn revision for git
alias setsvn='SVN_REV=`git svn info | grep ^Revision | cut -d\  -f2` && echo r$SVN_REV'

# GIT
alias gitp='git --no-pager'

# docker
alias docker-clean-images='docker rmi $(docker images -a --filter=dangling=true -q)'
alias docker-clean-ps='docker rm $(docker ps --filter=status=exited --filter=status=created -q)'
alias docker-clean-cache='docker rmi $(docker images -a -q)'
alias docker-build-dev='docker build -t $(echo "$(basename $(pwd))-dev") .'

# start OSX screensaver
alias ssaver="open -a /System/Library/CoreServices/ScreenSaverEngine.app"

alias open-ports="sudo lsof -iTCP -sTCP:LISTEN -n -P"

# idevice / adb
#alias id_l="idevice_id -l"
#alias ad_d="adb devices"
#alias ad_start="adb kill-server && adb start-server"
#alias sim_booted="echo "$(xcrun simctl list | grep -i booted | awk '{print $3}' | tr -d '(|)')""

# keychain stuff
alias list_kc="security list-keychains"
alias unlock_kc="security unlock-keychain"

alias df='df -h'
alias du='du -h'

# ls
alias ll='ls -lFhG'
alias ls='ls -G'
alias lld=ls_dirs
alias llh='ls -lhFG'
alias la='ls -AhG'
alias lad='la -d */'
alias l='ls -A1FG'
alias lt='ll -t'

#unity
alias unity="/Applications/Unity/Unity.app/Contents/MacOS/Unity"
alias unity_logs="cd ~/Library/Logs/Unity && tail -F *"


function repeat_5 {
    local cmd=${@}
    local times=5

    for i in $(seq ${times}); do eval '${cmd}'; sleep 1; done
}

function repeat {
    local cmd=${@}

    while true; do eval '${cmd}'; sleep 1; done
}

function kubectl-edit {
    local dep=$1
    kubectl edit deployment/${dep}
}

function kubectl-edit {
    local dep=$1
    kubectl edit deployment/${dep}
}

function kubectl-connect {
    local pod=$1
    kubectl exec -it ${pod} -- /bin/bash
}

function kubectl-delete {
    local pod=$1
    kubectl delete pod ${pod}
}

function kubectl-logs {
    local pod=$1
    kubectl logs -f ${pod}
}

function kubectl-get-pod {
    local name=$1
    if [ $# -eq 0 ]; then
        kubectl get pods
    else
        kubectl get pods | grep ${name}
    fi
}

function kubectl-config {
    kubectl config view
}

function kubectl-context {
    kubectl config current-context
}

function kubectl-set-context {
    local context=$1
    kubectl config use-context ${context}
}

function kubectl-get-contexts {
    local name=$1
    kubectl config get-contexts ${name}
}

function gcloud-configs {
    gcloud config configurations list
}

function gcloud-activate {
    local name=${1}
    gcloud config configurations activate ${name}
}

function gcloud-instances-list {
    local project=${1}
    local extras=""
    if [ ! -z $project ]; then
        extras+="--project ${project}"
    fi
    gcloud beta compute instances list ${extras}

}

function gcloud-ssh {
    local user_at_node=${1}
    local project=${2}
    local extras=${@:3}
    local appended_extras=""
    if [ ! -z $project ]; then
        appended_extras+=" --project ${project} "
    fi
    appended_extras+=${extras}

    gcloud beta compute ssh --ssh-key-file=${HOME}/.ssh/id_rsa --ssh-flag="-ServerAliveInterval=30" --internal-ip ${user_at_node} ${appended_extras}
}

function gcloud-scp {
    local files=${1}
    local where=${2}
    local project=${3}
    local extras=${@:4}
    local appended_extras=""
    if [ ! -z $project ]; then
        appended_extras+=" --project ${project} "
    fi
    appended_extras+=${extras}

    gcloud beta compute scp --internal-ip --ssh-key-file=${HOME}/.ssh/id_rsa ${files} ${where} ${appended_extras}
}

function gcloud-addresses {
    gcloud compute addresses list
}

function set-tags-py {
    echo "Set tags $(pwd)"
    find . ! -path '*/build/*' ! -path '*/.env/*' ! -path './src/*' -type f \( -iname '*.py' ! -iname '*test*.py' \) | xargs ctags
}


function set-cscope-py {
    echo "Set cscope $(pwd)"
    find . ! -path '*/build/*' ! -path '*/.env/*' ! -path './src/*' -type f \( -iname '*.py' ! -iname '*test*.py' \) > cscope.files
}


function py-elpy-requirements {
    pip3 install --force-reinstall jedi autopep8 rope flake8
}

function py-ipython-requirements {
    # python3.6 requires rlipython==0.1.1
    pip3 install --force-reinstall ipython==6.5.0 rlipython==0.1.1 gnureadline
}

function py-lint-requirements {
    pip3 install --force-reinstall pycodestyle flake8 mypy
}
function set-pyvenv {
    local venv_name=${1}
    local py_version=${2}


    if [ -z "${py_version}" ]; then
        py_version="python3"
    fi
    if [ -z "${venv_name}" ]; then
        venv_name=$(echo "$(basename $(pwd))")
    fi

    echo "** Creating ${py_version} venv ${venv_name} **"

    ${py_version} -m venv "${venv_name}"
}

function load-pyvenv {
    local venv_path=${1}
    if [ -d "${venv_path}" ]; then
        source "${venv_path}/bin/activate"
    fi
}

function install-pyvenv {
    if [ -f requirements.txt ]; then
        pip3 install -r requirements.txt
    fi
}

function py-run-checks {
    local against="${@:1}"
    echo "** Running pycodestyle ${against} **"
    pycodestyle ${against}
    echo "** Running flake8 ${against} **"
    flake8 ${against}
    echo "** Running mypy ${against} **"
    mypy ${against}
}


function py-unset-pipenv-project {
    unset PIPENV_VENV_IN_PROJECT
}

function ls-dirs {
    local path=$1
    if [ -z ${path} ]; then
        path="*/"
    else
        path+="*/"
    fi
    ls -d ${path}
}

function start-docker-dep-containers {
    local prefix=""
    if [ $# -eq 0 ]; then
        prefix="${PWD##*/}"
    else
        prefix=$1
    fi

    docker run -d --name=mongo-${prefix}  mongo:3
    docker run -d --name=redis-${prefix} --net=container:mongo-${prefix} redis:3
    docker run -d --name=nats-${prefix} --net=container:mongo-${prefix} nats:0.9.6
}

# find
function find_d {
    if [ $# -gt 1 ]; then
        find $2 -type d -iname $1
    else
        find . -type d -iname $1
    fi
}

function find_f {
    if [ $# -gt 1 ]; then
        find $2 -iname "$1"
    else
        find . -iname "$1"
    fi
}

# find_fr usage: regex (find options e.g. print0 -xargs ..)
# e.g. find_fr ".*\.cs" -print0
function find_fr {
    echo searching: $1
    echo find_options: ${@:2:($#)}
    echo "-----------------------------------------"
    find . -iregex "$1" ${@:2:($#)}
}

## find_fg usage:  filePattern (location) grepPattern
function find_fg {
    echo searching: ${@:1:($#-1)}
    echo grepping: ${@:($#)}
    echo "-----------------------------------------"
    find_fr ${@:1:($#-1)} -exec /usr/bin/grep -nri --color=auto "${@:($#)}" {} \;
}

## find and pass it to other command
## find_fa usage: find_fa "some_file.cpp" "git logp"
function find_fa {
    if [ ! $# -gt 1 ]; then
        echo "find_fa: too few args '$*' passed."
        return -1
    fi
    echo "Finding files matching: '${@:1:($#-1)}' and passing to command '${@:($#)}'"
    find_f "${@:1:($#-1)}" | xargs -n1 ${@:($#)}
}


function treetree {
    SEDMAGIC='s;[^/]*/;|____;g;s;____|; |;g'

    if [ "$#" -gt 0 ] ; then
        dirlist="$@"
    else
        dirlist="."
    fi

    for x in $dirlist; do
        find "$x" -print | sed -e "$SEDMAGIC"
    done
}

alias treeish=treeish
function treeish {
    if [ "$1" != "" ]
    then
        cd "$1"
    fi
    ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/ /' -e 's/-/|/'
# 1st sed: remove colons
# 2nd sed: replace higher level folder names with dashes
# 3rd sed: indent graph three spaces
# 4th sed: replace first dash with a vertical bar
    if [ `ls -F -1 | grep "/" | wc -l` = 0 ] # check if no folders
    then
        echo " -> no sub-directories"
    fi
    cd - > /dev/null 1>&1
}

function git_author_stats {
    author=$1
    git log --author="${author}" --pretty=tformat: --numstat \
        | gawk "{ add += \$1 ; subs += \$2 ; loc += \$1 - \$2 } END { printf \"Author: ${author} added lines: %s removed lines: %s total lines: %s\n\",add,subs,loc }" -
}

############
##  Grep  ##
############

alias g="grep -i --color=auto"
alias gr="grep -ir --color=auto"
alias gv="grep -v -i --color=auto"
alias gn="grep -nH -i --color=auto"

alias xg="xargs -n1"

######################
##  Man-pages|less  ##
######################

LESSPIPE=/usr/local/bin/src-hilite-lesspipe.sh
export LESSOPEN="| ${LESSPIPE} %s"
#export LESS='-R'
export LESS='-R -i -X'

alias lessl='less -N'

#man pages with color.
export LESS_TERMCAP_mb=$'\E[01;31m' # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;74m' # begin bold
export LESS_TERMCAP_me=$'\E[0m' # end mode
export LESS_TERMCAP_se=$'\E[0m' # end standout-mode
export LESS_TERMCAP_so=$'\E[38;5;246m' # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m' # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;146m' # begin underline
#less with colours:
export LESS_TERMCAP_mb=$'\E[01;31m'
export LESS_TERMCAP_md=$'\E[01;31m'
export LESS_TERMCAP_me=$'\E[0m'
export LESS_TERMCAP_se=$'\E[0m'
export LESS_TERMCAP_so=$'\E[01;44;33m'
export LESS_TERMCAP_ue=$'\E[0m'
export LESS_TERMCAP_us=$'\E[01;32m'

# bash magic to call functions defined here
# e.g. source ~/.bashrc activate_venv
#"$@"

